const fs = require('fs')
const {getConnection, getTableName, getPaths} = require("./util")
const {getConfig} = require('./config')

const SQL_TYPE = [
    {type: 'KEY',value:' PRIMARY KEY'},
    {type: ':', value: ''},
    {type: '{', value: '('},
    {type: 'BigString', value: 'TEXT(25000)'},
    {type: '\n}', value: ', \n    createTime  DATETIME, \n    updateTime DATETIME\n)'},
    {type: '!', value: ' NOT NULL'},
    {type: 'ID', value: 'VARCHAR(100)'},
    {type: 'String', value: 'VARCHAR(255)'},
    {type: 'Int', value: 'INT'},
    {type: 'Date', value: 'DATE'},
    {type: 'DateTime', value: 'DATETIME'},
    {type: 'Bool', value: 'BOOLEAN'},
    {type: 'Decimal', value: 'DECIMAL'},
]

const createTabal = async (drop) => {
    const conn = await getConnection();
    const paths = getPaths(getConfig('model_dir'), '.type.sql');

    if (conn.beginTransaction) {
        conn.beginTransaction(async (err) => {
            if (err) reject(err);
            try {
                for (const path of paths || []) {
                    const content = fs.readFileSync(path, 'utf-8');
                    //删除原表
                    try {
                        drop && await conn.query('DROP TABLE ' + getTableName(content))
                    } catch (e) {
                        conn.rollback && conn.rollback()
                        return console.log('您的模型创建有误')
                    }
                    //创建新表
                    const sql = getSql(content);
                    console.log(sql)
                   await conn.query(sql)
                }
                conn.release && conn.release();
                conn.commit && conn.commit();
                console.log('==================SUCCESS:::: INIT TABLE SUCCESS!!!================')
            } catch (e) {
                conn.rollback && conn.rollback()
                console.log('===================ERROR :::: ROLL BACK===================')
                console.log(e)
            }
        })
    } else {
        console.log('ERROR :::: ROLL BACK')
        console.log(conn)
        conn.rollback && conn.rollback()
    }
}

const getSql = (content) => {
    for (const type of SQL_TYPE) {
        const reg = new RegExp(type.type, 'g');
        content = content.replace(reg, type.value)
    }
    return content.replace('type', 'CREATE TABLE IF NOT EXISTS') + 'DEFAULT CHARSET=utf8;'
}

createTabal(true)