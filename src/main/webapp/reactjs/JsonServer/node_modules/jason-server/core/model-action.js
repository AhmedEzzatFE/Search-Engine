const {getFilter, resovleOrderBy} = require("./resove-filter")
const {merge, isEmpty, omit} = require('ramda')
const {formatDateTime} = require('./util')


const createSql = (table, input, fieldInfo, id) => {
    let sql = `INSERT INTO ${table} (id`;
    for (const info of fieldInfo) {
        if (input[info] !== undefined) {
            sql += `, ${info}`
        }
    }
    sql += `, createTime) VALUES ('${id}'`;
    for (const info of fieldInfo) {
        if (input[info] !== undefined) {
            sql += `, '${input[info]}'`
        }
    }
    sql += `, '${formatDateTime(new Date())}')`;
    return sql;
}


const updateSql = (table, input) => {
    const values = omit(['updateTime', 'createTime'], input[table.toLowerCase()] || {});
    if (isEmpty(values)) throw Error('update' + table + ' no input values')
    let filters = input.filter || {};
    const filter = getFilter(filters);
    let sql = `UPDATE ${table} SET `;
    const sets = [];
    for (let field in values) {
        values[field] != null && sets.push(field + `='${values[field]}'`)
    }
    sql += sets.join(', ');
    sql += `, updateTime= '${formatDateTime(new Date())}'`;
    sql += ' WHERE ' + filter;
    sql = sql.replace(' WHERE 1 = 1 ', '');
    return sql;
}

const selectSql = (table, input, fieldInfo) => {
    const filter = getFilter(input.filter);
    const orderBy = resovleOrderBy(input.orderBy)
    let sql = `SELECT ${fieldInfo.join(',')}, createTime, updateTime FROM  ${table} WHERE ${filter} ${orderBy}`;
    sql = sql.replace(' WHERE 1 = 1 ', '');
    sql += ` LIMIT ${input.skip || 0}, ${input.take || 5000}` ;
    return sql;
}

const deleteSql = (table, filter) => {
    let sql = `DELETE FROM ${table} WHERE ${getFilter(filter)}`;
    sql = sql.replace(' WHERE 1 = 1 ', '');
    return sql;
}

const countSql = (table, filter) => {
    filter = (filter || {}).filter || filter;
    let sql = `SELECT  COUNT(*) FROM ${table} WHERE ${getFilter(filter)}`;
    sql = sql.replace(' WHERE 1 = 1 ', '');
    return sql;
}

module.exports = {
    deleteSql,
    selectSql,
    updateSql,
    createSql,
    countSql
}