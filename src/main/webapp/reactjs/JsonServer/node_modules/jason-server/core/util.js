const {curry, compose, merge} = require('ramda')
const mysql = require('mysql')
const fs = require('fs')
const {getConfig} = require('./config')

const injectable = curry((args, apiFun) => typeof apiFun == 'object'
    ? {...apiFun, injects: args}
    : {apiFun, injects: args}
)

const apiService = compose;

const transaction = curry((isTransaction, apiFun) => typeof apiFun == 'object'
    ? {isTransaction, ...apiFun}
    : {isTransaction, apiFun}
)

const ignoreCheckToken = curry((ignoreCheckToken, apiFun) => typeof apiFun == 'object'
    ? {ignoreCheckToken, ...apiFun}
    : {ignoreCheckToken, apiFun}
)


const getTransactionFunc = async ({func, conn, values, isTransaction}) => {
    return new Promise(async (resolve, reject) => {

        //带事务
        if (isTransaction && conn.beginTransaction) {
            conn.beginTransaction(async (err) => {
                if (err) reject(err);
                try {
                    const ret = await func(values);
                    conn.commit && conn.commit();
                    conn.release && conn.release();
                    console.log('======================SUCCESS::::事务提交=====================')
                    resolve(ret);
                } catch (e) {
                    conn.rollback && conn.rollback()
                    conn.release();
                    console.log('======================ERROR :::: ROLL BACK=====================')
                    console.log(e, func)
                    resolve({systemBizIsError: true});
                }
            })
        } else {
            // 不带事务
            try {
                const ret = await func(values);
                conn.release();
                resolve(ret);
            } catch (e) {
                conn.release();
                console.log('======================ERROR :::: 错误提示=====================')
                console.log(e, func)
                resolve({systemBizIsError: true});
            }
        }
    })
}

const pool = mysql.createPool(getConfig('db_env'));

//返回连接
const getConnection = () => new Promise(function (resolve, reject) {
    pool.getConnection(function (err, connection) {
        if (err) return reject(err);
        return resolve(connection)
    })
})

const getTableName = (content) => content.split('{')[0].split('type')[1].replace(/\s/g, '')

const getPaths = (path, end) => {
    let pathArr = [];
    const res = fs.readdirSync(path) || [];
    for (const any of res) {
        if (any.endsWith(end || '.js')) {
            pathArr.push(path + '/' + any)
        } else if (fs.statSync(path).isDirectory() && !any.endsWith('.DS_Store')) {
            pathArr = [...pathArr, ...getPaths(path + '/' + any, end)]
        }
    }
    return pathArr
}

const doModelFunc = (conn, sql) => new Promise(function (resolve, reject) {
    console.log(sql)
    conn.query(sql, [], (err, result) => {
        if (err) {
            throw  Error(err)
            reject(null)
        }
        resolve(result)
    })
})

//获取字段
const getFieldsInfo = (content) => {
    const fields = [];
    content = content.split('{')[1].split('}')[0];
    content = content.replace(/\s|!/g, '');
    content = content.split(',');
    for (const group of content || []) {
        const info = group.split(':');
        fields.push({field: info[0], type: info[1]})
    }
    return fields
}

const getNum = num => num > 9 ? num : '0' + num;

const formatDateTime = time => {
    if (!time) return '-'
    const t = new Date(time);
    const year = t.getFullYear();
    const month = t.getMonth() + 1;
    const date = t.getDate();
    const hour = getNum(t.getHours());
    const minute = getNum(t.getMinutes());
    return year + '-' + month + '-' + date + ' ' + hour + ':' + minute
}

const getClientIp = (req) => {
    let ipAddress;
    const forwardedIpsStr = req.header('x-forwarded-for');
    if (forwardedIpsStr) {
        const forwardedIps = forwardedIpsStr.split(',');
        ipAddress = forwardedIps[0];
    }
    if (!ipAddress) {
        ipAddress = req.connection.remoteAddress;
    }
    return ipAddress
}

const SYS_AUTO_API_PREFIX = ['findAll', 'findOne', 'count', 'update', 'create', 'upsert']

module.exports = {
    injectable,
    transaction,
    apiService,
    getTransactionFunc,
    getConnection,
    getTableName,
    getPaths,
    doModelFunc,
    getClientIp,
    getFieldsInfo,
    formatDateTime,
    ignoreCheckToken,
    SYS_AUTO_API_PREFIX
}